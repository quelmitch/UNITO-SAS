package catering.businesslogic.staffmember;

import catering.persistence.PersistenceManager;
import catering.persistence.ResultHandler;
import catering.util.DateUtils;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

@Data
@NoArgsConstructor
public class StaffMember {
    public enum Role {
        CUOCO("c"),
        CHEF("h"),
        ORGANIZZATORE("o"),
        SERVIZIO("s"),
        PROPRIETARIO("p");

        private final String roleStringId;

        Role(String roleStringId) {
            this.roleStringId = roleStringId;
        }

        @Override
        public String toString() {
            return roleStringId;
        }
    }

    public enum EmploymentType {
        PERMANENTE,
        OCCASIONALE;
    }

    private int id;
    private String email;
    private String name;
    private String surname;
    private Date dateOfBirth;
    private String address;
    private String phone;
    private int wage;
    private EmploymentType employmentType;
    private final Map<Role, Set<String>> roles = new HashMap<>();

    public StaffMember(String email) {
        this.id = 0;
        this.email = email;
    }

    public StaffMember(String email, String name, String surname, Date dateOfBirth, String address,
                       String phone, int wage, EmploymentType employmentType) {
        this.email = email;
        this.name = name;
        this.surname = surname;
        this.dateOfBirth = dateOfBirth;
        this.address = address;
        this.phone = phone;
        this.wage = wage;
        this.employmentType = employmentType;
    }

    // GETTERS AND SETTERS generated by Lombok

    public Map<Role, Set<String>> getRoles() {
        return new HashMap<Role, Set<String>>(this.roles);
    }

    // BUSINESS LOGIC METHODS
    
    public boolean hasRole(Role role) {
        return this.roles.containsKey(role);
    }

    public boolean addRole(Role role, Set<String> jobs) {
        return this.roles.computeIfAbsent(role, k -> new HashSet<>()).addAll(jobs);
    }

    public boolean removeRole(Role role) {
        return this.roles.remove(role) != null;
    }

    public boolean removeJobs(Role role, Set<String> jobs) {
        return this.roles.get(role) != null && this.roles.get(role).removeAll(jobs);
    }
    
    public void changeEmploymentType(EmploymentType employmentType) {
        this.employmentType = employmentType;
    }

    // UTILITY
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(id).append(" ").append(email);

        if (!roles.isEmpty()) {
            sb.append(" : ");
            for (Map.Entry<Role, Set<String>> entry : roles.entrySet()) {
                Role role = entry.getKey();
                Set<String> associatedData = entry.getValue();

                sb.append(role.toString()).append(" [");
                if (!associatedData.isEmpty()) {
                    sb.append(String.join(", ", associatedData));
                }
                sb.append("] ");
            }
        }

        return sb.toString();
    }
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null || getClass() != obj.getClass())
            return false;

        StaffMember other = (StaffMember) obj;

        // If both staff members have valid IDs, compare by ID
        if (this.id > 0 && other.id > 0) {
            return this.id == other.id;
        }

        // Otherwise, if either ID is 0, compare by email
        return this.email != null && this.email.equals(other.email);
    }
    
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;

        // Use ID if it's valid
        if (id > 0) {
            result = prime * result + id;
        } else {
            // Otherwise use email
            result = prime * result + (email != null ? email.hashCode() : 0);
        }

        return result;
    }
    
    // PERSISTENCE METHODS

    /**
     * Loads a staff member by ID from the database
     * @param uid The user ID to load
     * @return StaffMember object with data from database
     */
    public static StaffMember load(int uid) {
        StaffMember staff = new StaffMember();
        String query = "SELECT * FROM StaffMembers WHERE id = ?";

        PersistenceManager.executeQuery(query, new ResultHandler() {
            @Override
            public void handle(ResultSet rs) throws SQLException {
                staff.id = rs.getInt("id");
                staff.email = rs.getString("email");
                staff.name = rs.getString("name");
                staff.surname = rs.getString("surname");
                staff.dateOfBirth = DateUtils.getDateFromResultSet(rs, "dateOfBirth");
                staff.address = rs.getString("address");
                staff.phone = rs.getString("phone");
                staff.wage = rs.getInt("wage");
                staff.employmentType = rs.getInt("employmentType_id") == 0 ? EmploymentType.PERMANENTE : EmploymentType.OCCASIONALE;
            }
        }, uid);

        if (staff.id > 0)
            loadRolesForStaffMember(staff);

        return staff;
    }

    /**
     * Loads a staff member by email from the database
     * @param email The email to load
     * @return StaffMember object with data from database
     */
    public static StaffMember load(String email) {
        StaffMember staff = new StaffMember();
        String userQuery = "SELECT * FROM StaffMembers WHERE email = ?";

        PersistenceManager.executeQuery(userQuery, new ResultHandler() {
            @Override
            public void handle(ResultSet rs) throws SQLException {
                staff.id = rs.getInt("id");
                staff.email = rs.getString("email");
                staff.name = rs.getString("name");
                staff.surname = rs.getString("surname");
                staff.dateOfBirth = DateUtils.getDateFromResultSet(rs, "dateOfBirth");
                staff.address = rs.getString("address");
                staff.phone = rs.getString("phone");
                staff.wage = rs.getInt("wage");
                staff.employmentType = rs.getInt("employmentType_id") == 0 ? EmploymentType.PERMANENTE : EmploymentType.OCCASIONALE;
            }
        }, email);

        if (staff.id > 0)
            loadRolesForStaffMember(staff);

        return staff;
    }

    /**
     * Loads all staff members from the database
     * @return ArrayList of all StaffMember objects
     */
    public static ArrayList<StaffMember> loadAllStaffMembers() {
        String userQuery = "SELECT * FROM StaffMembers";
        ArrayList<StaffMember> staffMembers = new ArrayList<>();

        PersistenceManager.executeQuery(userQuery, new ResultHandler() {
            @Override
            public void handle(ResultSet rs) throws SQLException {
                StaffMember staff = new StaffMember();

                staff.id = rs.getInt("id");
                staff.email = rs.getString("email");
                staff.name = rs.getString("name");
                staff.surname = rs.getString("surname");
                staff.dateOfBirth = DateUtils.getDateFromResultSet(rs, "dateOfBirth");
                staff.address = rs.getString("address");
                staff.phone = rs.getString("phone");
                staff.wage = rs.getInt("wage");
                staff.employmentType = rs.getInt("employmentType_id") == 0 ? EmploymentType.PERMANENTE : EmploymentType.OCCASIONALE;

                // Load roles for this user
                loadRolesForStaffMember(staff);
                staffMembers.add(staff);
            }
        });

        return staffMembers;
    }

    /**
     * Helper method to load roles for a staff member from database
     * @param u The StaffMember to load roles for
     */
    private static void loadRolesForStaffMember(StaffMember u) {
        String roleQuery = "SELECT * FROM StaffMemberRoles WHERE staff_member_id = ?";

        PersistenceManager.executeQuery(roleQuery, new ResultHandler() {
            @Override
            public void handle(ResultSet rs) throws SQLException {
                int role = rs.getInt("role_id");
                String job = rs.getString("job");
                switch (role) {
                    case 0:
                        u.roles.computeIfAbsent(StaffMember.Role.CUOCO, k -> new HashSet<>()).add(job);
                        break;
                    case 1:
                        u.roles.computeIfAbsent(StaffMember.Role.CHEF, k -> new HashSet<>()).add(job);
                        break;
                    case 2:
                        u.roles.computeIfAbsent(StaffMember.Role.ORGANIZZATORE, k -> new HashSet<>()).add(job);
                        break;
                    case 3:
                        u.roles.computeIfAbsent(StaffMember.Role.SERVIZIO, k -> new HashSet<>()).add(job);
                        break;
                    case 4:
                        u.roles.computeIfAbsent(StaffMember.Role.PROPRIETARIO, k -> new HashSet<>()).add(job);
                        break;
                }
            }
        }, u.id);
    }

    /**
     * Saves a new staff member to the database
     * @return true if successful, false otherwise
     */
    public boolean save() {
        if (id != 0)
            return false;

        String query = "INSERT INTO StaffMembers (email, name, surname, dateOfBirth, address, phone, wage, employmentType_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

        PersistenceManager.executeUpdate(
            query,
            email,
            name,
            surname,
            dateOfBirth,
            address,
            phone,
            wage,
            employmentType
        );

        id = PersistenceManager.getLastId();

        if (id > 0) {
            saveStaffMemberRoles();
            return true;
        }
        return false;
    }

    /**
     * Updates an existing staff member in the database
     * @return true if successful, false otherwise
     */
    public boolean update() {
        if (id == 0)
            return false;

        String query = "UPDATE StaffMembers SET email = ?, name = ?, surname = ?, dateOfBirth = ?, address = ?, phone = ?, wage = ?, employmentType_id = ? WHERE id = ?";

        int rows = PersistenceManager.executeUpdate(
            query,
            email,
            name,
            surname,
            dateOfBirth,
            address,
            phone,
            wage,
            employmentType,
            id
        );

        saveStaffMemberRoles();
        return rows > 0;
    }

    /**
     * Deletes a staff member from the database
     * @return true if successful, false otherwise
     */
    public boolean delete() {
        if (id == 0)
            return false; // Not in DB

        // First delete user roles
        String deleteRolesQuery = "DELETE FROM StaffMemberRoles WHERE staff_member_id = ?";
        PersistenceManager.executeUpdate(deleteRolesQuery, id);

        // Then delete user
        String deleteStaffMemberQuery = "DELETE FROM StaffMembers WHERE id = ?";
        int rows = PersistenceManager.executeUpdate(deleteStaffMemberQuery, id);

        if (rows > 0) {
            id = 0;
            return true;
        }
        return false;
    }

    /**
     * Saves staff member roles to the database
     */
    private void saveStaffMemberRoles() {
        if (id == 0) {
            return;
        }

        String deleteQuery = "DELETE FROM StaffMemberRoles WHERE staff_member_id = ?";
        PersistenceManager.executeUpdate(deleteQuery, id);

        for (Map.Entry<Role, Set<String>> entry : roles.entrySet()) {
            Role role = entry.getKey();
            Set<String> jobs = entry.getValue();

            String roleId = role.roleStringId;

            if (!jobs.isEmpty()) {
                for (String jobDetail : jobs) {
                    String insertQuery = "INSERT INTO StaffMemberRoles (staff_member_id, role_id, job) VALUES(?, ?, ?)";
                    PersistenceManager.executeUpdate(insertQuery, id, roleId, jobDetail);
                }
            } else {
                String insertQuery = "INSERT INTO StaffMemberRoles (staff_member_id, role_id) VALUES(?, ?)";
                PersistenceManager.executeUpdate(insertQuery, id, roleId);
            }
        }
    }
}